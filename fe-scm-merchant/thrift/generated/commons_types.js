//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.TReturnCode = {
  'SUCCESS' : 200,
  'FAILED' : 500
};
ttypes.TUserLevel = {
  'BD' : 0,
  'BDM' : 1,
  'CM' : 2,
  'RM' : 3,
  'GM' : 4,
  'SM' : 5
};
ttypes.TIsOrNot = {
  'NOT' : 0,
  'IS' : 1
};
ttypes.TProduct = {
  'POS' : 1,
  'QRC' : 2,
  'SEC' : 3
};
var TPage = module.exports.TPage = function(args) {
  this.currentPageNum = null;
  this.totalPageNum = null;
  this.totalRowCount = null;
  this.pageSize = null;
  if (args) {
    if (args.currentPageNum !== undefined) {
      this.currentPageNum = args.currentPageNum;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field currentPageNum is unset!');
    }
    if (args.totalPageNum !== undefined) {
      this.totalPageNum = args.totalPageNum;
    }
    if (args.totalRowCount !== undefined) {
      this.totalRowCount = args.totalRowCount;
    }
    if (args.pageSize !== undefined) {
      this.pageSize = args.pageSize;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pageSize is unset!');
    }
  }
};
TPage.prototype = {};
TPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.currentPageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalPageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.totalRowCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPage.prototype.write = function(output) {
  output.writeStructBegin('TPage');
  if (this.currentPageNum !== null && this.currentPageNum !== undefined) {
    output.writeFieldBegin('currentPageNum', Thrift.Type.I32, 1);
    output.writeI32(this.currentPageNum);
    output.writeFieldEnd();
  }
  if (this.totalPageNum !== null && this.totalPageNum !== undefined) {
    output.writeFieldBegin('totalPageNum', Thrift.Type.I32, 2);
    output.writeI32(this.totalPageNum);
    output.writeFieldEnd();
  }
  if (this.totalRowCount !== null && this.totalRowCount !== undefined) {
    output.writeFieldBegin('totalRowCount', Thrift.Type.I32, 3);
    output.writeI32(this.totalRowCount);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 4);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TError = module.exports.TError = function(args) {
  this.code = null;
  this.msg = null;
  if (args) {
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
TError.prototype = {};
TError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TError.prototype.write = function(output) {
  output.writeStructBegin('TError');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TBoolRes = module.exports.TBoolRes = function(args) {
  this.retCode = null;
  this.error = null;
  this.data = null;
  if (args) {
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retCode is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TBoolRes.prototype = {};
TBoolRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.TError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.data = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBoolRes.prototype.write = function(output) {
  output.writeStructBegin('TBoolRes');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.BOOL, 3);
    output.writeBool(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TIntRes = module.exports.TIntRes = function(args) {
  this.retCode = null;
  this.error = null;
  this.data = null;
  if (args) {
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retCode is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TIntRes.prototype = {};
TIntRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.TError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.data = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TIntRes.prototype.write = function(output) {
  output.writeStructBegin('TIntRes');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.I32, 3);
    output.writeI32(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TLongRes = module.exports.TLongRes = function(args) {
  this.retCode = null;
  this.error = null;
  this.data = null;
  if (args) {
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retCode is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TLongRes.prototype = {};
TLongRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.TError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.data = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TLongRes.prototype.write = function(output) {
  output.writeStructBegin('TLongRes');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.I64, 3);
    output.writeI64(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TStringRes = module.exports.TStringRes = function(args) {
  this.retCode = null;
  this.error = null;
  this.data = null;
  if (args) {
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retCode is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TStringRes.prototype = {};
TStringRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.TError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStringRes.prototype.write = function(output) {
  output.writeStructBegin('TStringRes');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 3);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TUploadLogMessage = module.exports.TUploadLogMessage = function(args) {
  this.userName = null;
  this.userRole = null;
  this.systemName = null;
  this.appkey = null;
  this.domain = null;
  this.url = null;
  if (args) {
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.userRole !== undefined) {
      this.userRole = args.userRole;
    }
    if (args.systemName !== undefined) {
      this.systemName = args.systemName;
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
    if (args.domain !== undefined) {
      this.domain = args.domain;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
TUploadLogMessage.prototype = {};
TUploadLogMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userRole = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.domain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUploadLogMessage.prototype.write = function(output) {
  output.writeStructBegin('TUploadLogMessage');
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 1);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.userRole !== null && this.userRole !== undefined) {
    output.writeFieldBegin('userRole', Thrift.Type.STRING, 2);
    output.writeString(this.userRole);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 3);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 4);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  if (this.domain !== null && this.domain !== undefined) {
    output.writeFieldBegin('domain', Thrift.Type.STRING, 5);
    output.writeString(this.domain);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 6);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

