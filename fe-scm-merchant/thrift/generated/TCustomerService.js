//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var commons_ttypes = require('./commons_types')
var commons2_ttypes = require('./commons2_types')


var ttypes = require('./customer_types');
//HELPER FUNCTIONS AND STRUCTURES

var TCustomerService_listCustomers_args = function(args) {
  this.param = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_listCustomers_args.prototype = {};
TCustomerService_listCustomers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.TCustomerQueryParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_listCustomers_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_listCustomers_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_listCustomers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_listCustomers_result.prototype = {};
TCustomerService_listCustomers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerPageResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_listCustomers_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_listCustomers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomer_args = function(args) {
  this.customerId = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_getCustomer_args.prototype = {};
TCustomerService_getCustomer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomer_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomer_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_getCustomer_result.prototype = {};
TCustomerService_getCustomer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomer_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerBatch_args = function(args) {
  this.customerIds = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.customerIds !== undefined) {
      this.customerIds = args.customerIds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerIds is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_getCustomerBatch_args.prototype = {};
TCustomerService_getCustomerBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.customerIds = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI64();
          this.customerIds.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerBatch_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerBatch_args');
  if (this.customerIds !== null && this.customerIds !== undefined) {
    output.writeFieldBegin('customerIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.customerIds.length);
    for (var iter39 in this.customerIds)
    {
      if (this.customerIds.hasOwnProperty(iter39))
      {
        iter39 = this.customerIds[iter39];
        output.writeI64(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerBatch_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_getCustomerBatch_result.prototype = {};
TCustomerService_getCustomerBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerListResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerBatch_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_checkQualification_args = function(args) {
  this.qualCode = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.qualCode !== undefined) {
      this.qualCode = args.qualCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualCode is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_checkQualification_args.prototype = {};
TCustomerService_checkQualification_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.qualCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_checkQualification_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_checkQualification_args');
  if (this.qualCode !== null && this.qualCode !== undefined) {
    output.writeFieldBegin('qualCode', Thrift.Type.STRING, 1);
    output.writeString(this.qualCode);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_checkQualification_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_checkQualification_result.prototype = {};
TCustomerService_checkQualification_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_checkQualification_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_checkQualification_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_searchCustomer_args = function(args) {
  this.qualCode = null;
  this.qualName = null;
  this.type = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.qualCode !== undefined) {
      this.qualCode = args.qualCode;
    }
    if (args.qualName !== undefined) {
      this.qualName = args.qualName;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_searchCustomer_args.prototype = {};
TCustomerService_searchCustomer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.qualCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.qualName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_searchCustomer_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_searchCustomer_args');
  if (this.qualCode !== null && this.qualCode !== undefined) {
    output.writeFieldBegin('qualCode', Thrift.Type.STRING, 1);
    output.writeString(this.qualCode);
    output.writeFieldEnd();
  }
  if (this.qualName !== null && this.qualName !== undefined) {
    output.writeFieldBegin('qualName', Thrift.Type.STRING, 2);
    output.writeString(this.qualName);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 4);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_searchCustomer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_searchCustomer_result.prototype = {};
TCustomerService_searchCustomer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerListResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_searchCustomer_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_searchCustomer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_saveCustomer_args = function(args) {
  this.customer = null;
  this.user = null;
  this.userType = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.customer !== undefined) {
      this.customer = args.customer;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customer is unset!');
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userType is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_saveCustomer_args.prototype = {};
TCustomerService_saveCustomer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer = new ttypes.TCustomerDTO();
        this.customer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_saveCustomer_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_saveCustomer_args');
  if (this.customer !== null && this.customer !== undefined) {
    output.writeFieldBegin('customer', Thrift.Type.STRUCT, 1);
    this.customer.write(output);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 3);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 4);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_saveCustomer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_saveCustomer_result.prototype = {};
TCustomerService_saveCustomer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TLongRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_saveCustomer_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_saveCustomer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_saveCustomerWithShopId_args = function(args) {
  this.customer = null;
  this.user = null;
  this.userType = null;
  this.shopId = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.customer !== undefined) {
      this.customer = args.customer;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customer is unset!');
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userType is unset!');
    }
    if (args.shopId !== undefined) {
      this.shopId = args.shopId;
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_saveCustomerWithShopId_args.prototype = {};
TCustomerService_saveCustomerWithShopId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer = new ttypes.TCustomerDTO();
        this.customer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.shopId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_saveCustomerWithShopId_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_saveCustomerWithShopId_args');
  if (this.customer !== null && this.customer !== undefined) {
    output.writeFieldBegin('customer', Thrift.Type.STRUCT, 1);
    this.customer.write(output);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 3);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  if (this.shopId !== null && this.shopId !== undefined) {
    output.writeFieldBegin('shopId', Thrift.Type.I32, 4);
    output.writeI32(this.shopId);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 5);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_saveCustomerWithShopId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_saveCustomerWithShopId_result.prototype = {};
TCustomerService_saveCustomerWithShopId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TLongRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_saveCustomerWithShopId_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_saveCustomerWithShopId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_saveCustomerWithShopIdApp_args = function(args) {
  this.customer = null;
  this.user = null;
  this.userType = null;
  this.shopId = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.customer !== undefined) {
      this.customer = args.customer;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customer is unset!');
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userType is unset!');
    }
    if (args.shopId !== undefined) {
      this.shopId = args.shopId;
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_saveCustomerWithShopIdApp_args.prototype = {};
TCustomerService_saveCustomerWithShopIdApp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer = new ttypes.TCustomerDTO();
        this.customer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.shopId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_saveCustomerWithShopIdApp_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_saveCustomerWithShopIdApp_args');
  if (this.customer !== null && this.customer !== undefined) {
    output.writeFieldBegin('customer', Thrift.Type.STRUCT, 1);
    this.customer.write(output);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 3);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  if (this.shopId !== null && this.shopId !== undefined) {
    output.writeFieldBegin('shopId', Thrift.Type.I32, 4);
    output.writeI32(this.shopId);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 5);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_saveCustomerWithShopIdApp_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_saveCustomerWithShopIdApp_result.prototype = {};
TCustomerService_saveCustomerWithShopIdApp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_saveCustomerWithShopIdApp_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_saveCustomerWithShopIdApp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_createEmptyCustomer_args = function(args) {
  this.user = null;
  this.userType = null;
  if (args) {
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userType is unset!');
    }
  }
};
TCustomerService_createEmptyCustomer_args.prototype = {};
TCustomerService_createEmptyCustomer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_createEmptyCustomer_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_createEmptyCustomer_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 2);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_createEmptyCustomer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_createEmptyCustomer_result.prototype = {};
TCustomerService_createEmptyCustomer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TLongRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_createEmptyCustomer_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_createEmptyCustomer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_createEmptyCustomerWithShopId_args = function(args) {
  this.user = null;
  this.userType = null;
  this.shopId = null;
  if (args) {
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userType is unset!');
    }
    if (args.shopId !== undefined) {
      this.shopId = args.shopId;
    }
  }
};
TCustomerService_createEmptyCustomerWithShopId_args.prototype = {};
TCustomerService_createEmptyCustomerWithShopId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shopId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_createEmptyCustomerWithShopId_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_createEmptyCustomerWithShopId_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 1);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 2);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  if (this.shopId !== null && this.shopId !== undefined) {
    output.writeFieldBegin('shopId', Thrift.Type.I32, 3);
    output.writeI32(this.shopId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_createEmptyCustomerWithShopId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_createEmptyCustomerWithShopId_result.prototype = {};
TCustomerService_createEmptyCustomerWithShopId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TLongRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_createEmptyCustomerWithShopId_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_createEmptyCustomerWithShopId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_submitAudit_args = function(args) {
  this.customerId = null;
  this.user = null;
  this.userType = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userType is unset!');
    }
  }
};
TCustomerService_submitAudit_args.prototype = {};
TCustomerService_submitAudit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_submitAudit_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_submitAudit_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 3);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_submitAudit_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_submitAudit_result.prototype = {};
TCustomerService_submitAudit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TBoolRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_submitAudit_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_submitAudit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_recallAudit_args = function(args) {
  this.customerId = null;
  this.user = null;
  this.userType = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userType is unset!');
    }
  }
};
TCustomerService_recallAudit_args.prototype = {};
TCustomerService_recallAudit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_recallAudit_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_recallAudit_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 3);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_recallAudit_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_recallAudit_result.prototype = {};
TCustomerService_recallAudit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TBoolRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_recallAudit_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_recallAudit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_auditPass_args = function(args) {
  this.customerId = null;
  this.user = null;
  this.userType = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userType is unset!');
    }
  }
};
TCustomerService_auditPass_args.prototype = {};
TCustomerService_auditPass_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_auditPass_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_auditPass_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 3);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_auditPass_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_auditPass_result.prototype = {};
TCustomerService_auditPass_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TBoolRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_auditPass_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_auditPass_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_auditFail_args = function(args) {
  this.customerId = null;
  this.user = null;
  this.userType = null;
  this.reason = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userType is unset!');
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
  }
};
TCustomerService_auditFail_args.prototype = {};
TCustomerService_auditFail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_auditFail_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_auditFail_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 3);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 4);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_auditFail_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_auditFail_result.prototype = {};
TCustomerService_auditFail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TBoolRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_auditFail_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_auditFail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_abandonCustomer_args = function(args) {
  this.customerId = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_abandonCustomer_args.prototype = {};
TCustomerService_abandonCustomer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_abandonCustomer_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_abandonCustomer_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_abandonCustomer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_abandonCustomer_result.prototype = {};
TCustomerService_abandonCustomer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TBoolRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_abandonCustomer_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_abandonCustomer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_listCustomersValid_args = function(args) {
  this.param = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.param !== undefined) {
      this.param = args.param;
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_listCustomersValid_args.prototype = {};
TCustomerService_listCustomersValid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.param = new ttypes.TCustomerQueryParam();
        this.param.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_listCustomersValid_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_listCustomersValid_args');
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRUCT, 1);
    this.param.write(output);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_listCustomersValid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_listCustomersValid_result.prototype = {};
TCustomerService_listCustomersValid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerPageResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_listCustomersValid_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_listCustomersValid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_searchCustomerValid_args = function(args) {
  this.qualCode = null;
  this.name = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.qualCode !== undefined) {
      this.qualCode = args.qualCode;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_searchCustomerValid_args.prototype = {};
TCustomerService_searchCustomerValid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.qualCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_searchCustomerValid_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_searchCustomerValid_args');
  if (this.qualCode !== null && this.qualCode !== undefined) {
    output.writeFieldBegin('qualCode', Thrift.Type.STRING, 1);
    output.writeString(this.qualCode);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 3);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_searchCustomerValid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_searchCustomerValid_result.prototype = {};
TCustomerService_searchCustomerValid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerListResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_searchCustomerValid_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_searchCustomerValid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerValid_args = function(args) {
  this.customerId = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_getCustomerValid_args.prototype = {};
TCustomerService_getCustomerValid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerValid_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerValid_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerValid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_getCustomerValid_result.prototype = {};
TCustomerService_getCustomerValid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerValid_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerValid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerValidOrNew_args = function(args) {
  this.customerId = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_getCustomerValidOrNew_args.prototype = {};
TCustomerService_getCustomerValidOrNew_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerValidOrNew_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerValidOrNew_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerValidOrNew_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_getCustomerValidOrNew_result.prototype = {};
TCustomerService_getCustomerValidOrNew_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerValidOrNew_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerValidOrNew_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_migrationCustomer_args = function(args) {
  this.customerId = null;
  this.migrationCustomerType = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.migrationCustomerType !== undefined) {
      this.migrationCustomerType = args.migrationCustomerType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field migrationCustomerType is unset!');
    }
  }
};
TCustomerService_migrationCustomer_args.prototype = {};
TCustomerService_migrationCustomer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.migrationCustomerType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_migrationCustomer_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_migrationCustomer_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.migrationCustomerType !== null && this.migrationCustomerType !== undefined) {
    output.writeFieldBegin('migrationCustomerType', Thrift.Type.I32, 2);
    output.writeI32(this.migrationCustomerType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_migrationCustomer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_migrationCustomer_result.prototype = {};
TCustomerService_migrationCustomer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TBoolRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_migrationCustomer_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_migrationCustomer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getBizUserByCustomerId_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
  }
};
TCustomerService_getBizUserByCustomerId_args.prototype = {};
TCustomerService_getBizUserByCustomerId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getBizUserByCustomerId_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getBizUserByCustomerId_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getBizUserByCustomerId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_getBizUserByCustomerId_result.prototype = {};
TCustomerService_getBizUserByCustomerId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TBizUserResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getBizUserByCustomerId_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getBizUserByCustomerId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_bindCustomer_args = function(args) {
  this.shopId = null;
  this.targetCustomerId = null;
  if (args) {
    if (args.shopId !== undefined) {
      this.shopId = args.shopId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shopId is unset!');
    }
    if (args.targetCustomerId !== undefined) {
      this.targetCustomerId = args.targetCustomerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field targetCustomerId is unset!');
    }
  }
};
TCustomerService_bindCustomer_args.prototype = {};
TCustomerService_bindCustomer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.shopId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.targetCustomerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_bindCustomer_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_bindCustomer_args');
  if (this.shopId !== null && this.shopId !== undefined) {
    output.writeFieldBegin('shopId', Thrift.Type.I32, 1);
    output.writeI32(this.shopId);
    output.writeFieldEnd();
  }
  if (this.targetCustomerId !== null && this.targetCustomerId !== undefined) {
    output.writeFieldBegin('targetCustomerId', Thrift.Type.I64, 2);
    output.writeI64(this.targetCustomerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_bindCustomer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_bindCustomer_result.prototype = {};
TCustomerService_bindCustomer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TBoolRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_bindCustomer_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_bindCustomer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_moveCustomer_args = function(args) {
  this.sourceCustomerId = null;
  this.targetCustomerId = null;
  if (args) {
    if (args.sourceCustomerId !== undefined) {
      this.sourceCustomerId = args.sourceCustomerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sourceCustomerId is unset!');
    }
    if (args.targetCustomerId !== undefined) {
      this.targetCustomerId = args.targetCustomerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field targetCustomerId is unset!');
    }
  }
};
TCustomerService_moveCustomer_args.prototype = {};
TCustomerService_moveCustomer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sourceCustomerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.targetCustomerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_moveCustomer_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_moveCustomer_args');
  if (this.sourceCustomerId !== null && this.sourceCustomerId !== undefined) {
    output.writeFieldBegin('sourceCustomerId', Thrift.Type.I64, 1);
    output.writeI64(this.sourceCustomerId);
    output.writeFieldEnd();
  }
  if (this.targetCustomerId !== null && this.targetCustomerId !== undefined) {
    output.writeFieldBegin('targetCustomerId', Thrift.Type.I64, 2);
    output.writeI64(this.targetCustomerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_moveCustomer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_moveCustomer_result.prototype = {};
TCustomerService_moveCustomer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TBoolRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_moveCustomer_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_moveCustomer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_preFillCustomer_args = function(args) {
  this.qualCode = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.qualCode !== undefined) {
      this.qualCode = args.qualCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualCode is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_preFillCustomer_args.prototype = {};
TCustomerService_preFillCustomer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.qualCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_preFillCustomer_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_preFillCustomer_args');
  if (this.qualCode !== null && this.qualCode !== undefined) {
    output.writeFieldBegin('qualCode', Thrift.Type.STRING, 1);
    output.writeString(this.qualCode);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_preFillCustomer_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_preFillCustomer_result.prototype = {};
TCustomerService_preFillCustomer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_preFillCustomer_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_preFillCustomer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_addMerchantToES_args = function(args) {
  this.customerId = null;
  this.bizLicence = null;
  this.bizName = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.bizLicence !== undefined) {
      this.bizLicence = args.bizLicence;
    }
    if (args.bizName !== undefined) {
      this.bizName = args.bizName;
    }
  }
};
TCustomerService_addMerchantToES_args.prototype = {};
TCustomerService_addMerchantToES_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.bizLicence = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bizName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_addMerchantToES_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_addMerchantToES_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.bizLicence !== null && this.bizLicence !== undefined) {
    output.writeFieldBegin('bizLicence', Thrift.Type.STRING, 2);
    output.writeString(this.bizLicence);
    output.writeFieldEnd();
  }
  if (this.bizName !== null && this.bizName !== undefined) {
    output.writeFieldBegin('bizName', Thrift.Type.STRING, 3);
    output.writeString(this.bizName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_addMerchantToES_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_addMerchantToES_result.prototype = {};
TCustomerService_addMerchantToES_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new commons_ttypes.TBoolRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_addMerchantToES_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_addMerchantToES_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getEsMerchantByBizName_args = function(args) {
  this.bizName = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.bizName !== undefined) {
      this.bizName = args.bizName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizName is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_getEsMerchantByBizName_args.prototype = {};
TCustomerService_getEsMerchantByBizName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bizName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getEsMerchantByBizName_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getEsMerchantByBizName_args');
  if (this.bizName !== null && this.bizName !== undefined) {
    output.writeFieldBegin('bizName', Thrift.Type.STRING, 1);
    output.writeString(this.bizName);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getEsMerchantByBizName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_getEsMerchantByBizName_result.prototype = {};
TCustomerService_getEsMerchantByBizName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TEsMerchantResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getEsMerchantByBizName_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getEsMerchantByBizName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getEsMerchantByBizLicence_args = function(args) {
  this.bizLicence = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.bizLicence !== undefined) {
      this.bizLicence = args.bizLicence;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizLicence is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_getEsMerchantByBizLicence_args.prototype = {};
TCustomerService_getEsMerchantByBizLicence_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bizLicence = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getEsMerchantByBizLicence_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getEsMerchantByBizLicence_args');
  if (this.bizLicence !== null && this.bizLicence !== undefined) {
    output.writeFieldBegin('bizLicence', Thrift.Type.STRING, 1);
    output.writeString(this.bizLicence);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getEsMerchantByBizLicence_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_getEsMerchantByBizLicence_result.prototype = {};
TCustomerService_getEsMerchantByBizLicence_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TEsMerchantResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getEsMerchantByBizLicence_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getEsMerchantByBizLicence_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_searchCustomerForShopChange_args = function(args) {
  this.qualCode = null;
  this.type = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.qualCode !== undefined) {
      this.qualCode = args.qualCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualCode is unset!');
    }
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_searchCustomerForShopChange_args.prototype = {};
TCustomerService_searchCustomerForShopChange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.qualCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_searchCustomerForShopChange_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_searchCustomerForShopChange_args');
  if (this.qualCode !== null && this.qualCode !== undefined) {
    output.writeFieldBegin('qualCode', Thrift.Type.STRING, 1);
    output.writeString(this.qualCode);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 3);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_searchCustomerForShopChange_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_searchCustomerForShopChange_result.prototype = {};
TCustomerService_searchCustomerForShopChange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerResForShopChangeDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_searchCustomerForShopChange_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_searchCustomerForShopChange_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_saveCustomerWithAuth_args = function(args) {
  this.customer = null;
  this.user = null;
  this.userType = null;
  this.shopId = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.customer !== undefined) {
      this.customer = args.customer;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customer is unset!');
    }
    if (args.user !== undefined) {
      this.user = args.user;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field user is unset!');
    }
    if (args.userType !== undefined) {
      this.userType = args.userType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userType is unset!');
    }
    if (args.shopId !== undefined) {
      this.shopId = args.shopId;
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_saveCustomerWithAuth_args.prototype = {};
TCustomerService_saveCustomerWithAuth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.customer = new ttypes.TCustomerDTO();
        this.customer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.userType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.shopId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_saveCustomerWithAuth_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_saveCustomerWithAuth_args');
  if (this.customer !== null && this.customer !== undefined) {
    output.writeFieldBegin('customer', Thrift.Type.STRUCT, 1);
    this.customer.write(output);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.BYTE, 3);
    output.writeByte(this.userType);
    output.writeFieldEnd();
  }
  if (this.shopId !== null && this.shopId !== undefined) {
    output.writeFieldBegin('shopId', Thrift.Type.I32, 4);
    output.writeI32(this.shopId);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 5);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_saveCustomerWithAuth_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_saveCustomerWithAuth_result.prototype = {};
TCustomerService_saveCustomerWithAuth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_saveCustomerWithAuth_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_saveCustomerWithAuth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerWithAuth_args = function(args) {
  this.customerId = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_getCustomerWithAuth_args.prototype = {};
TCustomerService_getCustomerWithAuth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerWithAuth_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerWithAuth_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerWithAuth_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_getCustomerWithAuth_result.prototype = {};
TCustomerService_getCustomerWithAuth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerWithAuth_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerWithAuth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_preFillCustomerWithAuth_args = function(args) {
  this.qualCode = null;
  this.uploadLogMessage = null;
  if (args) {
    if (args.qualCode !== undefined) {
      this.qualCode = args.qualCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualCode is unset!');
    }
    if (args.uploadLogMessage !== undefined) {
      this.uploadLogMessage = args.uploadLogMessage;
    }
  }
};
TCustomerService_preFillCustomerWithAuth_args.prototype = {};
TCustomerService_preFillCustomerWithAuth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.qualCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uploadLogMessage = new commons_ttypes.TUploadLogMessage();
        this.uploadLogMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_preFillCustomerWithAuth_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_preFillCustomerWithAuth_args');
  if (this.qualCode !== null && this.qualCode !== undefined) {
    output.writeFieldBegin('qualCode', Thrift.Type.STRING, 1);
    output.writeString(this.qualCode);
    output.writeFieldEnd();
  }
  if (this.uploadLogMessage !== null && this.uploadLogMessage !== undefined) {
    output.writeFieldBegin('uploadLogMessage', Thrift.Type.STRUCT, 2);
    this.uploadLogMessage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_preFillCustomerWithAuth_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_preFillCustomerWithAuth_result.prototype = {};
TCustomerService_preFillCustomerWithAuth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_preFillCustomerWithAuth_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_preFillCustomerWithAuth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerStatusAndType_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
  }
};
TCustomerService_getCustomerStatusAndType_args.prototype = {};
TCustomerService_getCustomerStatusAndType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerStatusAndType_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerStatusAndType_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerStatusAndType_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_getCustomerStatusAndType_result.prototype = {};
TCustomerService_getCustomerStatusAndType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerStatusAndTypeResDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerStatusAndType_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerStatusAndType_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerAuthenticationMessage_args = function(args) {
  this.customerId = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
  }
};
TCustomerService_getCustomerAuthenticationMessage_args.prototype = {};
TCustomerService_getCustomerAuthenticationMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerAuthenticationMessage_args.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerAuthenticationMessage_args');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerService_getCustomerAuthenticationMessage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
TCustomerService_getCustomerAuthenticationMessage_result.prototype = {};
TCustomerService_getCustomerAuthenticationMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TCustomerAuthenticationMessageRes();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerService_getCustomerAuthenticationMessage_result.prototype.write = function(output) {
  output.writeStructBegin('TCustomerService_getCustomerAuthenticationMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
TCustomerServiceClient.prototype = {};
TCustomerServiceClient.prototype.seqid = function() { return this._seqid; }
TCustomerServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
TCustomerServiceClient.prototype.listCustomers = function(param, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listCustomers(param, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listCustomers(param, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_listCustomers = function(param, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listCustomers', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_listCustomers_args();
  args.param = param;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_listCustomers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_listCustomers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listCustomers failed: unknown result');
};
TCustomerServiceClient.prototype.getCustomer = function(customerId, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCustomer(customerId, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCustomer(customerId, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_getCustomer = function(customerId, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCustomer', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_getCustomer_args();
  args.customerId = customerId;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_getCustomer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_getCustomer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCustomer failed: unknown result');
};
TCustomerServiceClient.prototype.getCustomerBatch = function(customerIds, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCustomerBatch(customerIds, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCustomerBatch(customerIds, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_getCustomerBatch = function(customerIds, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCustomerBatch', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_getCustomerBatch_args();
  args.customerIds = customerIds;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_getCustomerBatch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_getCustomerBatch_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCustomerBatch failed: unknown result');
};
TCustomerServiceClient.prototype.checkQualification = function(qualCode, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkQualification(qualCode, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkQualification(qualCode, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_checkQualification = function(qualCode, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkQualification', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_checkQualification_args();
  args.qualCode = qualCode;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_checkQualification = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_checkQualification_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkQualification failed: unknown result');
};
TCustomerServiceClient.prototype.searchCustomer = function(qualCode, qualName, type, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchCustomer(qualCode, qualName, type, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchCustomer(qualCode, qualName, type, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_searchCustomer = function(qualCode, qualName, type, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchCustomer', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_searchCustomer_args();
  args.qualCode = qualCode;
  args.qualName = qualName;
  args.type = type;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_searchCustomer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_searchCustomer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchCustomer failed: unknown result');
};
TCustomerServiceClient.prototype.saveCustomer = function(customer, user, userType, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveCustomer(customer, user, userType, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveCustomer(customer, user, userType, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_saveCustomer = function(customer, user, userType, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveCustomer', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_saveCustomer_args();
  args.customer = customer;
  args.user = user;
  args.userType = userType;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_saveCustomer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_saveCustomer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveCustomer failed: unknown result');
};
TCustomerServiceClient.prototype.saveCustomerWithShopId = function(customer, user, userType, shopId, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveCustomerWithShopId(customer, user, userType, shopId, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveCustomerWithShopId(customer, user, userType, shopId, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_saveCustomerWithShopId = function(customer, user, userType, shopId, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveCustomerWithShopId', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_saveCustomerWithShopId_args();
  args.customer = customer;
  args.user = user;
  args.userType = userType;
  args.shopId = shopId;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_saveCustomerWithShopId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_saveCustomerWithShopId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveCustomerWithShopId failed: unknown result');
};
TCustomerServiceClient.prototype.saveCustomerWithShopIdApp = function(customer, user, userType, shopId, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveCustomerWithShopIdApp(customer, user, userType, shopId, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveCustomerWithShopIdApp(customer, user, userType, shopId, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_saveCustomerWithShopIdApp = function(customer, user, userType, shopId, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveCustomerWithShopIdApp', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_saveCustomerWithShopIdApp_args();
  args.customer = customer;
  args.user = user;
  args.userType = userType;
  args.shopId = shopId;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_saveCustomerWithShopIdApp = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_saveCustomerWithShopIdApp_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveCustomerWithShopIdApp failed: unknown result');
};
TCustomerServiceClient.prototype.createEmptyCustomer = function(user, userType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createEmptyCustomer(user, userType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createEmptyCustomer(user, userType);
  }
};

TCustomerServiceClient.prototype.send_createEmptyCustomer = function(user, userType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createEmptyCustomer', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_createEmptyCustomer_args();
  args.user = user;
  args.userType = userType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_createEmptyCustomer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_createEmptyCustomer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createEmptyCustomer failed: unknown result');
};
TCustomerServiceClient.prototype.createEmptyCustomerWithShopId = function(user, userType, shopId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createEmptyCustomerWithShopId(user, userType, shopId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createEmptyCustomerWithShopId(user, userType, shopId);
  }
};

TCustomerServiceClient.prototype.send_createEmptyCustomerWithShopId = function(user, userType, shopId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createEmptyCustomerWithShopId', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_createEmptyCustomerWithShopId_args();
  args.user = user;
  args.userType = userType;
  args.shopId = shopId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_createEmptyCustomerWithShopId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_createEmptyCustomerWithShopId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createEmptyCustomerWithShopId failed: unknown result');
};
TCustomerServiceClient.prototype.submitAudit = function(customerId, user, userType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_submitAudit(customerId, user, userType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_submitAudit(customerId, user, userType);
  }
};

TCustomerServiceClient.prototype.send_submitAudit = function(customerId, user, userType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('submitAudit', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_submitAudit_args();
  args.customerId = customerId;
  args.user = user;
  args.userType = userType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_submitAudit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_submitAudit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('submitAudit failed: unknown result');
};
TCustomerServiceClient.prototype.recallAudit = function(customerId, user, userType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_recallAudit(customerId, user, userType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_recallAudit(customerId, user, userType);
  }
};

TCustomerServiceClient.prototype.send_recallAudit = function(customerId, user, userType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('recallAudit', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_recallAudit_args();
  args.customerId = customerId;
  args.user = user;
  args.userType = userType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_recallAudit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_recallAudit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('recallAudit failed: unknown result');
};
TCustomerServiceClient.prototype.auditPass = function(customerId, user, userType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_auditPass(customerId, user, userType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_auditPass(customerId, user, userType);
  }
};

TCustomerServiceClient.prototype.send_auditPass = function(customerId, user, userType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('auditPass', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_auditPass_args();
  args.customerId = customerId;
  args.user = user;
  args.userType = userType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_auditPass = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_auditPass_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('auditPass failed: unknown result');
};
TCustomerServiceClient.prototype.auditFail = function(customerId, user, userType, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_auditFail(customerId, user, userType, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_auditFail(customerId, user, userType, reason);
  }
};

TCustomerServiceClient.prototype.send_auditFail = function(customerId, user, userType, reason) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('auditFail', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_auditFail_args();
  args.customerId = customerId;
  args.user = user;
  args.userType = userType;
  args.reason = reason;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_auditFail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_auditFail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('auditFail failed: unknown result');
};
TCustomerServiceClient.prototype.abandonCustomer = function(customerId, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_abandonCustomer(customerId, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_abandonCustomer(customerId, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_abandonCustomer = function(customerId, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('abandonCustomer', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_abandonCustomer_args();
  args.customerId = customerId;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_abandonCustomer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_abandonCustomer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('abandonCustomer failed: unknown result');
};
TCustomerServiceClient.prototype.listCustomersValid = function(param, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listCustomersValid(param, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listCustomersValid(param, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_listCustomersValid = function(param, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listCustomersValid', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_listCustomersValid_args();
  args.param = param;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_listCustomersValid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_listCustomersValid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listCustomersValid failed: unknown result');
};
TCustomerServiceClient.prototype.searchCustomerValid = function(qualCode, name, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchCustomerValid(qualCode, name, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchCustomerValid(qualCode, name, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_searchCustomerValid = function(qualCode, name, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchCustomerValid', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_searchCustomerValid_args();
  args.qualCode = qualCode;
  args.name = name;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_searchCustomerValid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_searchCustomerValid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchCustomerValid failed: unknown result');
};
TCustomerServiceClient.prototype.getCustomerValid = function(customerId, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCustomerValid(customerId, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCustomerValid(customerId, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_getCustomerValid = function(customerId, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCustomerValid', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_getCustomerValid_args();
  args.customerId = customerId;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_getCustomerValid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_getCustomerValid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCustomerValid failed: unknown result');
};
TCustomerServiceClient.prototype.getCustomerValidOrNew = function(customerId, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCustomerValidOrNew(customerId, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCustomerValidOrNew(customerId, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_getCustomerValidOrNew = function(customerId, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCustomerValidOrNew', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_getCustomerValidOrNew_args();
  args.customerId = customerId;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_getCustomerValidOrNew = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_getCustomerValidOrNew_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCustomerValidOrNew failed: unknown result');
};
TCustomerServiceClient.prototype.migrationCustomer = function(customerId, migrationCustomerType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_migrationCustomer(customerId, migrationCustomerType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_migrationCustomer(customerId, migrationCustomerType);
  }
};

TCustomerServiceClient.prototype.send_migrationCustomer = function(customerId, migrationCustomerType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('migrationCustomer', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_migrationCustomer_args();
  args.customerId = customerId;
  args.migrationCustomerType = migrationCustomerType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_migrationCustomer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_migrationCustomer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('migrationCustomer failed: unknown result');
};
TCustomerServiceClient.prototype.getBizUserByCustomerId = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBizUserByCustomerId(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBizUserByCustomerId(customerId);
  }
};

TCustomerServiceClient.prototype.send_getBizUserByCustomerId = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBizUserByCustomerId', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_getBizUserByCustomerId_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_getBizUserByCustomerId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_getBizUserByCustomerId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBizUserByCustomerId failed: unknown result');
};
TCustomerServiceClient.prototype.bindCustomer = function(shopId, targetCustomerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_bindCustomer(shopId, targetCustomerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_bindCustomer(shopId, targetCustomerId);
  }
};

TCustomerServiceClient.prototype.send_bindCustomer = function(shopId, targetCustomerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('bindCustomer', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_bindCustomer_args();
  args.shopId = shopId;
  args.targetCustomerId = targetCustomerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_bindCustomer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_bindCustomer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('bindCustomer failed: unknown result');
};
TCustomerServiceClient.prototype.moveCustomer = function(sourceCustomerId, targetCustomerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_moveCustomer(sourceCustomerId, targetCustomerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_moveCustomer(sourceCustomerId, targetCustomerId);
  }
};

TCustomerServiceClient.prototype.send_moveCustomer = function(sourceCustomerId, targetCustomerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('moveCustomer', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_moveCustomer_args();
  args.sourceCustomerId = sourceCustomerId;
  args.targetCustomerId = targetCustomerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_moveCustomer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_moveCustomer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('moveCustomer failed: unknown result');
};
TCustomerServiceClient.prototype.preFillCustomer = function(qualCode, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_preFillCustomer(qualCode, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_preFillCustomer(qualCode, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_preFillCustomer = function(qualCode, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('preFillCustomer', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_preFillCustomer_args();
  args.qualCode = qualCode;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_preFillCustomer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_preFillCustomer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('preFillCustomer failed: unknown result');
};
TCustomerServiceClient.prototype.addMerchantToES = function(customerId, bizLicence, bizName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addMerchantToES(customerId, bizLicence, bizName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addMerchantToES(customerId, bizLicence, bizName);
  }
};

TCustomerServiceClient.prototype.send_addMerchantToES = function(customerId, bizLicence, bizName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addMerchantToES', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_addMerchantToES_args();
  args.customerId = customerId;
  args.bizLicence = bizLicence;
  args.bizName = bizName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_addMerchantToES = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_addMerchantToES_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addMerchantToES failed: unknown result');
};
TCustomerServiceClient.prototype.getEsMerchantByBizName = function(bizName, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getEsMerchantByBizName(bizName, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getEsMerchantByBizName(bizName, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_getEsMerchantByBizName = function(bizName, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getEsMerchantByBizName', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_getEsMerchantByBizName_args();
  args.bizName = bizName;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_getEsMerchantByBizName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_getEsMerchantByBizName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getEsMerchantByBizName failed: unknown result');
};
TCustomerServiceClient.prototype.getEsMerchantByBizLicence = function(bizLicence, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getEsMerchantByBizLicence(bizLicence, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getEsMerchantByBizLicence(bizLicence, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_getEsMerchantByBizLicence = function(bizLicence, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getEsMerchantByBizLicence', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_getEsMerchantByBizLicence_args();
  args.bizLicence = bizLicence;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_getEsMerchantByBizLicence = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_getEsMerchantByBizLicence_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getEsMerchantByBizLicence failed: unknown result');
};
TCustomerServiceClient.prototype.searchCustomerForShopChange = function(qualCode, type, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_searchCustomerForShopChange(qualCode, type, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_searchCustomerForShopChange(qualCode, type, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_searchCustomerForShopChange = function(qualCode, type, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('searchCustomerForShopChange', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_searchCustomerForShopChange_args();
  args.qualCode = qualCode;
  args.type = type;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_searchCustomerForShopChange = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_searchCustomerForShopChange_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('searchCustomerForShopChange failed: unknown result');
};
TCustomerServiceClient.prototype.saveCustomerWithAuth = function(customer, user, userType, shopId, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_saveCustomerWithAuth(customer, user, userType, shopId, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_saveCustomerWithAuth(customer, user, userType, shopId, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_saveCustomerWithAuth = function(customer, user, userType, shopId, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('saveCustomerWithAuth', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_saveCustomerWithAuth_args();
  args.customer = customer;
  args.user = user;
  args.userType = userType;
  args.shopId = shopId;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_saveCustomerWithAuth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_saveCustomerWithAuth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('saveCustomerWithAuth failed: unknown result');
};
TCustomerServiceClient.prototype.getCustomerWithAuth = function(customerId, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCustomerWithAuth(customerId, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCustomerWithAuth(customerId, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_getCustomerWithAuth = function(customerId, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCustomerWithAuth', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_getCustomerWithAuth_args();
  args.customerId = customerId;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_getCustomerWithAuth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_getCustomerWithAuth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCustomerWithAuth failed: unknown result');
};
TCustomerServiceClient.prototype.preFillCustomerWithAuth = function(qualCode, uploadLogMessage, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_preFillCustomerWithAuth(qualCode, uploadLogMessage);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_preFillCustomerWithAuth(qualCode, uploadLogMessage);
  }
};

TCustomerServiceClient.prototype.send_preFillCustomerWithAuth = function(qualCode, uploadLogMessage) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('preFillCustomerWithAuth', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_preFillCustomerWithAuth_args();
  args.qualCode = qualCode;
  args.uploadLogMessage = uploadLogMessage;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_preFillCustomerWithAuth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_preFillCustomerWithAuth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('preFillCustomerWithAuth failed: unknown result');
};
TCustomerServiceClient.prototype.getCustomerStatusAndType = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCustomerStatusAndType(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCustomerStatusAndType(customerId);
  }
};

TCustomerServiceClient.prototype.send_getCustomerStatusAndType = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCustomerStatusAndType', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_getCustomerStatusAndType_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_getCustomerStatusAndType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_getCustomerStatusAndType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCustomerStatusAndType failed: unknown result');
};
TCustomerServiceClient.prototype.getCustomerAuthenticationMessage = function(customerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCustomerAuthenticationMessage(customerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCustomerAuthenticationMessage(customerId);
  }
};

TCustomerServiceClient.prototype.send_getCustomerAuthenticationMessage = function(customerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCustomerAuthenticationMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new TCustomerService_getCustomerAuthenticationMessage_args();
  args.customerId = customerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

TCustomerServiceClient.prototype.recv_getCustomerAuthenticationMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new TCustomerService_getCustomerAuthenticationMessage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCustomerAuthenticationMessage failed: unknown result');
};
var TCustomerServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
TCustomerServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

TCustomerServiceProcessor.prototype.process_listCustomers = function(seqid, input, output) {
  var args = new TCustomerService_listCustomers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listCustomers.length === 2) {
    Q.fcall(this._handler.listCustomers, args.param, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_listCustomers_result({success: result});
        output.writeMessageBegin("listCustomers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_listCustomers_result(err);
        output.writeMessageBegin("listCustomers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listCustomers(args.param, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_listCustomers_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listCustomers", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_getCustomer = function(seqid, input, output) {
  var args = new TCustomerService_getCustomer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCustomer.length === 2) {
    Q.fcall(this._handler.getCustomer, args.customerId, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_getCustomer_result({success: result});
        output.writeMessageBegin("getCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_getCustomer_result(err);
        output.writeMessageBegin("getCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCustomer(args.customerId, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_getCustomer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCustomer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_getCustomerBatch = function(seqid, input, output) {
  var args = new TCustomerService_getCustomerBatch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCustomerBatch.length === 2) {
    Q.fcall(this._handler.getCustomerBatch, args.customerIds, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_getCustomerBatch_result({success: result});
        output.writeMessageBegin("getCustomerBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_getCustomerBatch_result(err);
        output.writeMessageBegin("getCustomerBatch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCustomerBatch(args.customerIds, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_getCustomerBatch_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCustomerBatch", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_checkQualification = function(seqid, input, output) {
  var args = new TCustomerService_checkQualification_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkQualification.length === 2) {
    Q.fcall(this._handler.checkQualification, args.qualCode, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_checkQualification_result({success: result});
        output.writeMessageBegin("checkQualification", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_checkQualification_result(err);
        output.writeMessageBegin("checkQualification", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkQualification(args.qualCode, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_checkQualification_result((err != null ? err : {success: result}));
      output.writeMessageBegin("checkQualification", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_searchCustomer = function(seqid, input, output) {
  var args = new TCustomerService_searchCustomer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.searchCustomer.length === 4) {
    Q.fcall(this._handler.searchCustomer, args.qualCode, args.qualName, args.type, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_searchCustomer_result({success: result});
        output.writeMessageBegin("searchCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_searchCustomer_result(err);
        output.writeMessageBegin("searchCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.searchCustomer(args.qualCode, args.qualName, args.type, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_searchCustomer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("searchCustomer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_saveCustomer = function(seqid, input, output) {
  var args = new TCustomerService_saveCustomer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveCustomer.length === 4) {
    Q.fcall(this._handler.saveCustomer, args.customer, args.user, args.userType, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_saveCustomer_result({success: result});
        output.writeMessageBegin("saveCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_saveCustomer_result(err);
        output.writeMessageBegin("saveCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveCustomer(args.customer, args.user, args.userType, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_saveCustomer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("saveCustomer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_saveCustomerWithShopId = function(seqid, input, output) {
  var args = new TCustomerService_saveCustomerWithShopId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveCustomerWithShopId.length === 5) {
    Q.fcall(this._handler.saveCustomerWithShopId, args.customer, args.user, args.userType, args.shopId, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_saveCustomerWithShopId_result({success: result});
        output.writeMessageBegin("saveCustomerWithShopId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_saveCustomerWithShopId_result(err);
        output.writeMessageBegin("saveCustomerWithShopId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveCustomerWithShopId(args.customer, args.user, args.userType, args.shopId, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_saveCustomerWithShopId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("saveCustomerWithShopId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_saveCustomerWithShopIdApp = function(seqid, input, output) {
  var args = new TCustomerService_saveCustomerWithShopIdApp_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveCustomerWithShopIdApp.length === 5) {
    Q.fcall(this._handler.saveCustomerWithShopIdApp, args.customer, args.user, args.userType, args.shopId, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_saveCustomerWithShopIdApp_result({success: result});
        output.writeMessageBegin("saveCustomerWithShopIdApp", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_saveCustomerWithShopIdApp_result(err);
        output.writeMessageBegin("saveCustomerWithShopIdApp", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveCustomerWithShopIdApp(args.customer, args.user, args.userType, args.shopId, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_saveCustomerWithShopIdApp_result((err != null ? err : {success: result}));
      output.writeMessageBegin("saveCustomerWithShopIdApp", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_createEmptyCustomer = function(seqid, input, output) {
  var args = new TCustomerService_createEmptyCustomer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createEmptyCustomer.length === 2) {
    Q.fcall(this._handler.createEmptyCustomer, args.user, args.userType)
      .then(function(result) {
        var result = new TCustomerService_createEmptyCustomer_result({success: result});
        output.writeMessageBegin("createEmptyCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_createEmptyCustomer_result(err);
        output.writeMessageBegin("createEmptyCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createEmptyCustomer(args.user, args.userType,  function (err, result) {
      var result = new TCustomerService_createEmptyCustomer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createEmptyCustomer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_createEmptyCustomerWithShopId = function(seqid, input, output) {
  var args = new TCustomerService_createEmptyCustomerWithShopId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createEmptyCustomerWithShopId.length === 3) {
    Q.fcall(this._handler.createEmptyCustomerWithShopId, args.user, args.userType, args.shopId)
      .then(function(result) {
        var result = new TCustomerService_createEmptyCustomerWithShopId_result({success: result});
        output.writeMessageBegin("createEmptyCustomerWithShopId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_createEmptyCustomerWithShopId_result(err);
        output.writeMessageBegin("createEmptyCustomerWithShopId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createEmptyCustomerWithShopId(args.user, args.userType, args.shopId,  function (err, result) {
      var result = new TCustomerService_createEmptyCustomerWithShopId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createEmptyCustomerWithShopId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_submitAudit = function(seqid, input, output) {
  var args = new TCustomerService_submitAudit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.submitAudit.length === 3) {
    Q.fcall(this._handler.submitAudit, args.customerId, args.user, args.userType)
      .then(function(result) {
        var result = new TCustomerService_submitAudit_result({success: result});
        output.writeMessageBegin("submitAudit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_submitAudit_result(err);
        output.writeMessageBegin("submitAudit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.submitAudit(args.customerId, args.user, args.userType,  function (err, result) {
      var result = new TCustomerService_submitAudit_result((err != null ? err : {success: result}));
      output.writeMessageBegin("submitAudit", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_recallAudit = function(seqid, input, output) {
  var args = new TCustomerService_recallAudit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.recallAudit.length === 3) {
    Q.fcall(this._handler.recallAudit, args.customerId, args.user, args.userType)
      .then(function(result) {
        var result = new TCustomerService_recallAudit_result({success: result});
        output.writeMessageBegin("recallAudit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_recallAudit_result(err);
        output.writeMessageBegin("recallAudit", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.recallAudit(args.customerId, args.user, args.userType,  function (err, result) {
      var result = new TCustomerService_recallAudit_result((err != null ? err : {success: result}));
      output.writeMessageBegin("recallAudit", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_auditPass = function(seqid, input, output) {
  var args = new TCustomerService_auditPass_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.auditPass.length === 3) {
    Q.fcall(this._handler.auditPass, args.customerId, args.user, args.userType)
      .then(function(result) {
        var result = new TCustomerService_auditPass_result({success: result});
        output.writeMessageBegin("auditPass", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_auditPass_result(err);
        output.writeMessageBegin("auditPass", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.auditPass(args.customerId, args.user, args.userType,  function (err, result) {
      var result = new TCustomerService_auditPass_result((err != null ? err : {success: result}));
      output.writeMessageBegin("auditPass", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_auditFail = function(seqid, input, output) {
  var args = new TCustomerService_auditFail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.auditFail.length === 4) {
    Q.fcall(this._handler.auditFail, args.customerId, args.user, args.userType, args.reason)
      .then(function(result) {
        var result = new TCustomerService_auditFail_result({success: result});
        output.writeMessageBegin("auditFail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_auditFail_result(err);
        output.writeMessageBegin("auditFail", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.auditFail(args.customerId, args.user, args.userType, args.reason,  function (err, result) {
      var result = new TCustomerService_auditFail_result((err != null ? err : {success: result}));
      output.writeMessageBegin("auditFail", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_abandonCustomer = function(seqid, input, output) {
  var args = new TCustomerService_abandonCustomer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.abandonCustomer.length === 2) {
    Q.fcall(this._handler.abandonCustomer, args.customerId, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_abandonCustomer_result({success: result});
        output.writeMessageBegin("abandonCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_abandonCustomer_result(err);
        output.writeMessageBegin("abandonCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.abandonCustomer(args.customerId, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_abandonCustomer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("abandonCustomer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_listCustomersValid = function(seqid, input, output) {
  var args = new TCustomerService_listCustomersValid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listCustomersValid.length === 2) {
    Q.fcall(this._handler.listCustomersValid, args.param, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_listCustomersValid_result({success: result});
        output.writeMessageBegin("listCustomersValid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_listCustomersValid_result(err);
        output.writeMessageBegin("listCustomersValid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listCustomersValid(args.param, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_listCustomersValid_result((err != null ? err : {success: result}));
      output.writeMessageBegin("listCustomersValid", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_searchCustomerValid = function(seqid, input, output) {
  var args = new TCustomerService_searchCustomerValid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.searchCustomerValid.length === 3) {
    Q.fcall(this._handler.searchCustomerValid, args.qualCode, args.name, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_searchCustomerValid_result({success: result});
        output.writeMessageBegin("searchCustomerValid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_searchCustomerValid_result(err);
        output.writeMessageBegin("searchCustomerValid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.searchCustomerValid(args.qualCode, args.name, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_searchCustomerValid_result((err != null ? err : {success: result}));
      output.writeMessageBegin("searchCustomerValid", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_getCustomerValid = function(seqid, input, output) {
  var args = new TCustomerService_getCustomerValid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCustomerValid.length === 2) {
    Q.fcall(this._handler.getCustomerValid, args.customerId, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_getCustomerValid_result({success: result});
        output.writeMessageBegin("getCustomerValid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_getCustomerValid_result(err);
        output.writeMessageBegin("getCustomerValid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCustomerValid(args.customerId, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_getCustomerValid_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCustomerValid", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_getCustomerValidOrNew = function(seqid, input, output) {
  var args = new TCustomerService_getCustomerValidOrNew_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCustomerValidOrNew.length === 2) {
    Q.fcall(this._handler.getCustomerValidOrNew, args.customerId, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_getCustomerValidOrNew_result({success: result});
        output.writeMessageBegin("getCustomerValidOrNew", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_getCustomerValidOrNew_result(err);
        output.writeMessageBegin("getCustomerValidOrNew", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCustomerValidOrNew(args.customerId, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_getCustomerValidOrNew_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCustomerValidOrNew", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_migrationCustomer = function(seqid, input, output) {
  var args = new TCustomerService_migrationCustomer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.migrationCustomer.length === 2) {
    Q.fcall(this._handler.migrationCustomer, args.customerId, args.migrationCustomerType)
      .then(function(result) {
        var result = new TCustomerService_migrationCustomer_result({success: result});
        output.writeMessageBegin("migrationCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_migrationCustomer_result(err);
        output.writeMessageBegin("migrationCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.migrationCustomer(args.customerId, args.migrationCustomerType,  function (err, result) {
      var result = new TCustomerService_migrationCustomer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("migrationCustomer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_getBizUserByCustomerId = function(seqid, input, output) {
  var args = new TCustomerService_getBizUserByCustomerId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBizUserByCustomerId.length === 1) {
    Q.fcall(this._handler.getBizUserByCustomerId, args.customerId)
      .then(function(result) {
        var result = new TCustomerService_getBizUserByCustomerId_result({success: result});
        output.writeMessageBegin("getBizUserByCustomerId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_getBizUserByCustomerId_result(err);
        output.writeMessageBegin("getBizUserByCustomerId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBizUserByCustomerId(args.customerId,  function (err, result) {
      var result = new TCustomerService_getBizUserByCustomerId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getBizUserByCustomerId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_bindCustomer = function(seqid, input, output) {
  var args = new TCustomerService_bindCustomer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.bindCustomer.length === 2) {
    Q.fcall(this._handler.bindCustomer, args.shopId, args.targetCustomerId)
      .then(function(result) {
        var result = new TCustomerService_bindCustomer_result({success: result});
        output.writeMessageBegin("bindCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_bindCustomer_result(err);
        output.writeMessageBegin("bindCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.bindCustomer(args.shopId, args.targetCustomerId,  function (err, result) {
      var result = new TCustomerService_bindCustomer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("bindCustomer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_moveCustomer = function(seqid, input, output) {
  var args = new TCustomerService_moveCustomer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.moveCustomer.length === 2) {
    Q.fcall(this._handler.moveCustomer, args.sourceCustomerId, args.targetCustomerId)
      .then(function(result) {
        var result = new TCustomerService_moveCustomer_result({success: result});
        output.writeMessageBegin("moveCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_moveCustomer_result(err);
        output.writeMessageBegin("moveCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.moveCustomer(args.sourceCustomerId, args.targetCustomerId,  function (err, result) {
      var result = new TCustomerService_moveCustomer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("moveCustomer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_preFillCustomer = function(seqid, input, output) {
  var args = new TCustomerService_preFillCustomer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.preFillCustomer.length === 2) {
    Q.fcall(this._handler.preFillCustomer, args.qualCode, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_preFillCustomer_result({success: result});
        output.writeMessageBegin("preFillCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_preFillCustomer_result(err);
        output.writeMessageBegin("preFillCustomer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.preFillCustomer(args.qualCode, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_preFillCustomer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("preFillCustomer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_addMerchantToES = function(seqid, input, output) {
  var args = new TCustomerService_addMerchantToES_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addMerchantToES.length === 3) {
    Q.fcall(this._handler.addMerchantToES, args.customerId, args.bizLicence, args.bizName)
      .then(function(result) {
        var result = new TCustomerService_addMerchantToES_result({success: result});
        output.writeMessageBegin("addMerchantToES", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_addMerchantToES_result(err);
        output.writeMessageBegin("addMerchantToES", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addMerchantToES(args.customerId, args.bizLicence, args.bizName,  function (err, result) {
      var result = new TCustomerService_addMerchantToES_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addMerchantToES", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_getEsMerchantByBizName = function(seqid, input, output) {
  var args = new TCustomerService_getEsMerchantByBizName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getEsMerchantByBizName.length === 2) {
    Q.fcall(this._handler.getEsMerchantByBizName, args.bizName, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_getEsMerchantByBizName_result({success: result});
        output.writeMessageBegin("getEsMerchantByBizName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_getEsMerchantByBizName_result(err);
        output.writeMessageBegin("getEsMerchantByBizName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getEsMerchantByBizName(args.bizName, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_getEsMerchantByBizName_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getEsMerchantByBizName", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_getEsMerchantByBizLicence = function(seqid, input, output) {
  var args = new TCustomerService_getEsMerchantByBizLicence_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getEsMerchantByBizLicence.length === 2) {
    Q.fcall(this._handler.getEsMerchantByBizLicence, args.bizLicence, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_getEsMerchantByBizLicence_result({success: result});
        output.writeMessageBegin("getEsMerchantByBizLicence", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_getEsMerchantByBizLicence_result(err);
        output.writeMessageBegin("getEsMerchantByBizLicence", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getEsMerchantByBizLicence(args.bizLicence, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_getEsMerchantByBizLicence_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getEsMerchantByBizLicence", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_searchCustomerForShopChange = function(seqid, input, output) {
  var args = new TCustomerService_searchCustomerForShopChange_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.searchCustomerForShopChange.length === 3) {
    Q.fcall(this._handler.searchCustomerForShopChange, args.qualCode, args.type, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_searchCustomerForShopChange_result({success: result});
        output.writeMessageBegin("searchCustomerForShopChange", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_searchCustomerForShopChange_result(err);
        output.writeMessageBegin("searchCustomerForShopChange", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.searchCustomerForShopChange(args.qualCode, args.type, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_searchCustomerForShopChange_result((err != null ? err : {success: result}));
      output.writeMessageBegin("searchCustomerForShopChange", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_saveCustomerWithAuth = function(seqid, input, output) {
  var args = new TCustomerService_saveCustomerWithAuth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.saveCustomerWithAuth.length === 5) {
    Q.fcall(this._handler.saveCustomerWithAuth, args.customer, args.user, args.userType, args.shopId, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_saveCustomerWithAuth_result({success: result});
        output.writeMessageBegin("saveCustomerWithAuth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_saveCustomerWithAuth_result(err);
        output.writeMessageBegin("saveCustomerWithAuth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.saveCustomerWithAuth(args.customer, args.user, args.userType, args.shopId, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_saveCustomerWithAuth_result((err != null ? err : {success: result}));
      output.writeMessageBegin("saveCustomerWithAuth", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_getCustomerWithAuth = function(seqid, input, output) {
  var args = new TCustomerService_getCustomerWithAuth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCustomerWithAuth.length === 2) {
    Q.fcall(this._handler.getCustomerWithAuth, args.customerId, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_getCustomerWithAuth_result({success: result});
        output.writeMessageBegin("getCustomerWithAuth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_getCustomerWithAuth_result(err);
        output.writeMessageBegin("getCustomerWithAuth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCustomerWithAuth(args.customerId, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_getCustomerWithAuth_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCustomerWithAuth", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_preFillCustomerWithAuth = function(seqid, input, output) {
  var args = new TCustomerService_preFillCustomerWithAuth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.preFillCustomerWithAuth.length === 2) {
    Q.fcall(this._handler.preFillCustomerWithAuth, args.qualCode, args.uploadLogMessage)
      .then(function(result) {
        var result = new TCustomerService_preFillCustomerWithAuth_result({success: result});
        output.writeMessageBegin("preFillCustomerWithAuth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_preFillCustomerWithAuth_result(err);
        output.writeMessageBegin("preFillCustomerWithAuth", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.preFillCustomerWithAuth(args.qualCode, args.uploadLogMessage,  function (err, result) {
      var result = new TCustomerService_preFillCustomerWithAuth_result((err != null ? err : {success: result}));
      output.writeMessageBegin("preFillCustomerWithAuth", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_getCustomerStatusAndType = function(seqid, input, output) {
  var args = new TCustomerService_getCustomerStatusAndType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCustomerStatusAndType.length === 1) {
    Q.fcall(this._handler.getCustomerStatusAndType, args.customerId)
      .then(function(result) {
        var result = new TCustomerService_getCustomerStatusAndType_result({success: result});
        output.writeMessageBegin("getCustomerStatusAndType", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_getCustomerStatusAndType_result(err);
        output.writeMessageBegin("getCustomerStatusAndType", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCustomerStatusAndType(args.customerId,  function (err, result) {
      var result = new TCustomerService_getCustomerStatusAndType_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCustomerStatusAndType", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

TCustomerServiceProcessor.prototype.process_getCustomerAuthenticationMessage = function(seqid, input, output) {
  var args = new TCustomerService_getCustomerAuthenticationMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCustomerAuthenticationMessage.length === 1) {
    Q.fcall(this._handler.getCustomerAuthenticationMessage, args.customerId)
      .then(function(result) {
        var result = new TCustomerService_getCustomerAuthenticationMessage_result({success: result});
        output.writeMessageBegin("getCustomerAuthenticationMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new TCustomerService_getCustomerAuthenticationMessage_result(err);
        output.writeMessageBegin("getCustomerAuthenticationMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCustomerAuthenticationMessage(args.customerId,  function (err, result) {
      var result = new TCustomerService_getCustomerAuthenticationMessage_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getCustomerAuthenticationMessage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

