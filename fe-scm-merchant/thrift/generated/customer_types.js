//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var commons_ttypes = require('./commons_types')
var commons2_ttypes = require('./commons2_types')


var ttypes = module.exports = {};
ttypes.TCustomerStatus = {
  'NEW' : 1,
  'WAIT_AUDIT' : 2,
  'AUDIT_UNPASS' : 3,
  'AUDIT_PASS' : 4,
  'NORMAL' : 5,
  'DELETE' : 9
};
ttypes.TMigrationCustomerType = {
  'HAVE_MERCHANT' : 1,
  'NO_MERCHANT' : 2
};
ttypes.TAuthenticationType = {
  'PHONE' : 1,
  'BANK_CARD' : 2
};
ttypes.TSignPersonType = {
  'LEGAL_PERSON' : 1,
  'AUTHORIZATION_PERSON' : 2,
  'SELF_PERSON' : 3
};
ttypes.TRealNameStatus = {
  'NO_REAL_NAME' : 1,
  'AUDIT' : 2,
  'AUDIT_REJECT' : 3,
  'HAVE_REAL_NAME' : 4
};
var TAttachment = module.exports.TAttachment = function(args) {
  this.type = null;
  this.attachment = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.attachment !== undefined) {
      this.attachment = args.attachment;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attachment is unset!');
    }
  }
};
TAttachment.prototype = {};
TAttachment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attachment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAttachment.prototype.write = function(output) {
  output.writeStructBegin('TAttachment');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.attachment !== null && this.attachment !== undefined) {
    output.writeFieldBegin('attachment', Thrift.Type.STRING, 2);
    output.writeString(this.attachment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCompanyQualification = module.exports.TCompanyQualification = function(args) {
  this.regAddress = null;
  this.qualPic = null;
  this.taxCard = null;
  this.orgCodeCard = null;
  this.corpIdcardName = null;
  this.idcardType = null;
  this.idcardNo = null;
  this.idcardFrontPhoto = null;
  this.idcardBackPhoto = null;
  this.deadlineType = null;
  this.deadlineDate = null;
  this.businessLicensePhoto = null;
  this.businessScope = null;
  if (args) {
    if (args.regAddress !== undefined) {
      this.regAddress = args.regAddress;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field regAddress is unset!');
    }
    if (args.qualPic !== undefined) {
      this.qualPic = args.qualPic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualPic is unset!');
    }
    if (args.taxCard !== undefined) {
      this.taxCard = args.taxCard;
    }
    if (args.orgCodeCard !== undefined) {
      this.orgCodeCard = args.orgCodeCard;
    }
    if (args.corpIdcardName !== undefined) {
      this.corpIdcardName = args.corpIdcardName;
    }
    if (args.idcardType !== undefined) {
      this.idcardType = args.idcardType;
    }
    if (args.idcardNo !== undefined) {
      this.idcardNo = args.idcardNo;
    }
    if (args.idcardFrontPhoto !== undefined) {
      this.idcardFrontPhoto = args.idcardFrontPhoto;
    }
    if (args.idcardBackPhoto !== undefined) {
      this.idcardBackPhoto = args.idcardBackPhoto;
    }
    if (args.deadlineType !== undefined) {
      this.deadlineType = args.deadlineType;
    }
    if (args.deadlineDate !== undefined) {
      this.deadlineDate = args.deadlineDate;
    }
    if (args.businessLicensePhoto !== undefined) {
      this.businessLicensePhoto = args.businessLicensePhoto;
    }
    if (args.businessScope !== undefined) {
      this.businessScope = args.businessScope;
    }
  }
};
TCompanyQualification.prototype = {};
TCompanyQualification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.regAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.qualPic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.taxCard = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.orgCodeCard = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.corpIdcardName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.idcardType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.idcardNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.idcardFrontPhoto = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.idcardBackPhoto = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.deadlineType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.deadlineDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.businessLicensePhoto = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.businessScope = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCompanyQualification.prototype.write = function(output) {
  output.writeStructBegin('TCompanyQualification');
  if (this.regAddress !== null && this.regAddress !== undefined) {
    output.writeFieldBegin('regAddress', Thrift.Type.STRING, 1);
    output.writeString(this.regAddress);
    output.writeFieldEnd();
  }
  if (this.qualPic !== null && this.qualPic !== undefined) {
    output.writeFieldBegin('qualPic', Thrift.Type.STRING, 2);
    output.writeString(this.qualPic);
    output.writeFieldEnd();
  }
  if (this.taxCard !== null && this.taxCard !== undefined) {
    output.writeFieldBegin('taxCard', Thrift.Type.STRING, 3);
    output.writeString(this.taxCard);
    output.writeFieldEnd();
  }
  if (this.orgCodeCard !== null && this.orgCodeCard !== undefined) {
    output.writeFieldBegin('orgCodeCard', Thrift.Type.STRING, 4);
    output.writeString(this.orgCodeCard);
    output.writeFieldEnd();
  }
  if (this.corpIdcardName !== null && this.corpIdcardName !== undefined) {
    output.writeFieldBegin('corpIdcardName', Thrift.Type.STRING, 5);
    output.writeString(this.corpIdcardName);
    output.writeFieldEnd();
  }
  if (this.idcardType !== null && this.idcardType !== undefined) {
    output.writeFieldBegin('idcardType', Thrift.Type.I32, 6);
    output.writeI32(this.idcardType);
    output.writeFieldEnd();
  }
  if (this.idcardNo !== null && this.idcardNo !== undefined) {
    output.writeFieldBegin('idcardNo', Thrift.Type.STRING, 7);
    output.writeString(this.idcardNo);
    output.writeFieldEnd();
  }
  if (this.idcardFrontPhoto !== null && this.idcardFrontPhoto !== undefined) {
    output.writeFieldBegin('idcardFrontPhoto', Thrift.Type.STRING, 8);
    output.writeString(this.idcardFrontPhoto);
    output.writeFieldEnd();
  }
  if (this.idcardBackPhoto !== null && this.idcardBackPhoto !== undefined) {
    output.writeFieldBegin('idcardBackPhoto', Thrift.Type.STRING, 9);
    output.writeString(this.idcardBackPhoto);
    output.writeFieldEnd();
  }
  if (this.deadlineType !== null && this.deadlineType !== undefined) {
    output.writeFieldBegin('deadlineType', Thrift.Type.I32, 20);
    output.writeI32(this.deadlineType);
    output.writeFieldEnd();
  }
  if (this.deadlineDate !== null && this.deadlineDate !== undefined) {
    output.writeFieldBegin('deadlineDate', Thrift.Type.STRING, 21);
    output.writeString(this.deadlineDate);
    output.writeFieldEnd();
  }
  if (this.businessLicensePhoto !== null && this.businessLicensePhoto !== undefined) {
    output.writeFieldBegin('businessLicensePhoto', Thrift.Type.STRING, 22);
    output.writeString(this.businessLicensePhoto);
    output.writeFieldEnd();
  }
  if (this.businessScope !== null && this.businessScope !== undefined) {
    output.writeFieldBegin('businessScope', Thrift.Type.STRING, 23);
    output.writeString(this.businessScope);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TPersonalQualification = module.exports.TPersonalQualification = function(args) {
  this.idcardFrontPhoto = null;
  this.idcardBackPhoto = null;
  if (args) {
    if (args.idcardFrontPhoto !== undefined) {
      this.idcardFrontPhoto = args.idcardFrontPhoto;
    }
    if (args.idcardBackPhoto !== undefined) {
      this.idcardBackPhoto = args.idcardBackPhoto;
    }
  }
};
TPersonalQualification.prototype = {};
TPersonalQualification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.idcardFrontPhoto = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.idcardBackPhoto = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPersonalQualification.prototype.write = function(output) {
  output.writeStructBegin('TPersonalQualification');
  if (this.idcardFrontPhoto !== null && this.idcardFrontPhoto !== undefined) {
    output.writeFieldBegin('idcardFrontPhoto', Thrift.Type.STRING, 1);
    output.writeString(this.idcardFrontPhoto);
    output.writeFieldEnd();
  }
  if (this.idcardBackPhoto !== null && this.idcardBackPhoto !== undefined) {
    output.writeFieldBegin('idcardBackPhoto', Thrift.Type.STRING, 2);
    output.writeString(this.idcardBackPhoto);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TAuthenticationMessage = module.exports.TAuthenticationMessage = function(args) {
  this.authenticationType = null;
  this.signPersonType = null;
  this.phone = null;
  this.name = null;
  this.idcardNo = null;
  this.bankCardNo = null;
  this.bankCardPhone = null;
  this.authFileUrl = null;
  this.authorizerIdcardFrontUrl = null;
  this.authorizerIdcardBackUrl = null;
  if (args) {
    if (args.authenticationType !== undefined) {
      this.authenticationType = args.authenticationType;
    }
    if (args.signPersonType !== undefined) {
      this.signPersonType = args.signPersonType;
    }
    if (args.phone !== undefined) {
      this.phone = args.phone;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.idcardNo !== undefined) {
      this.idcardNo = args.idcardNo;
    }
    if (args.bankCardNo !== undefined) {
      this.bankCardNo = args.bankCardNo;
    }
    if (args.bankCardPhone !== undefined) {
      this.bankCardPhone = args.bankCardPhone;
    }
    if (args.authFileUrl !== undefined) {
      this.authFileUrl = args.authFileUrl;
    }
    if (args.authorizerIdcardFrontUrl !== undefined) {
      this.authorizerIdcardFrontUrl = args.authorizerIdcardFrontUrl;
    }
    if (args.authorizerIdcardBackUrl !== undefined) {
      this.authorizerIdcardBackUrl = args.authorizerIdcardBackUrl;
    }
  }
};
TAuthenticationMessage.prototype = {};
TAuthenticationMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.authenticationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.signPersonType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.idcardNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.bankCardNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.bankCardPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.authFileUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.authorizerIdcardFrontUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.authorizerIdcardBackUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAuthenticationMessage.prototype.write = function(output) {
  output.writeStructBegin('TAuthenticationMessage');
  if (this.authenticationType !== null && this.authenticationType !== undefined) {
    output.writeFieldBegin('authenticationType', Thrift.Type.I32, 1);
    output.writeI32(this.authenticationType);
    output.writeFieldEnd();
  }
  if (this.signPersonType !== null && this.signPersonType !== undefined) {
    output.writeFieldBegin('signPersonType', Thrift.Type.I32, 2);
    output.writeI32(this.signPersonType);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 3);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.idcardNo !== null && this.idcardNo !== undefined) {
    output.writeFieldBegin('idcardNo', Thrift.Type.STRING, 5);
    output.writeString(this.idcardNo);
    output.writeFieldEnd();
  }
  if (this.bankCardNo !== null && this.bankCardNo !== undefined) {
    output.writeFieldBegin('bankCardNo', Thrift.Type.STRING, 6);
    output.writeString(this.bankCardNo);
    output.writeFieldEnd();
  }
  if (this.bankCardPhone !== null && this.bankCardPhone !== undefined) {
    output.writeFieldBegin('bankCardPhone', Thrift.Type.STRING, 7);
    output.writeString(this.bankCardPhone);
    output.writeFieldEnd();
  }
  if (this.authFileUrl !== null && this.authFileUrl !== undefined) {
    output.writeFieldBegin('authFileUrl', Thrift.Type.STRING, 8);
    output.writeString(this.authFileUrl);
    output.writeFieldEnd();
  }
  if (this.authorizerIdcardFrontUrl !== null && this.authorizerIdcardFrontUrl !== undefined) {
    output.writeFieldBegin('authorizerIdcardFrontUrl', Thrift.Type.STRING, 9);
    output.writeString(this.authorizerIdcardFrontUrl);
    output.writeFieldEnd();
  }
  if (this.authorizerIdcardBackUrl !== null && this.authorizerIdcardBackUrl !== undefined) {
    output.writeFieldBegin('authorizerIdcardBackUrl', Thrift.Type.STRING, 10);
    output.writeString(this.authorizerIdcardBackUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerAuthenticationMessage = module.exports.TCustomerAuthenticationMessage = function(args) {
  this.customerId = null;
  this.realNameStatus = null;
  this.authenticationType = null;
  this.signPersonType = null;
  this.phone = null;
  this.name = null;
  this.idcardNo = null;
  this.bankCardNo = null;
  this.authFileUrl = null;
  this.authorizerIdcardFrontUrl = null;
  this.authorizerIdcardBackUrl = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    }
    if (args.realNameStatus !== undefined) {
      this.realNameStatus = args.realNameStatus;
    }
    if (args.authenticationType !== undefined) {
      this.authenticationType = args.authenticationType;
    }
    if (args.signPersonType !== undefined) {
      this.signPersonType = args.signPersonType;
    }
    if (args.phone !== undefined) {
      this.phone = args.phone;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.idcardNo !== undefined) {
      this.idcardNo = args.idcardNo;
    }
    if (args.bankCardNo !== undefined) {
      this.bankCardNo = args.bankCardNo;
    }
    if (args.authFileUrl !== undefined) {
      this.authFileUrl = args.authFileUrl;
    }
    if (args.authorizerIdcardFrontUrl !== undefined) {
      this.authorizerIdcardFrontUrl = args.authorizerIdcardFrontUrl;
    }
    if (args.authorizerIdcardBackUrl !== undefined) {
      this.authorizerIdcardBackUrl = args.authorizerIdcardBackUrl;
    }
  }
};
TCustomerAuthenticationMessage.prototype = {};
TCustomerAuthenticationMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.customerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.realNameStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.authenticationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.signPersonType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.idcardNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.bankCardNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.authFileUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.authorizerIdcardFrontUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.authorizerIdcardBackUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerAuthenticationMessage.prototype.write = function(output) {
  output.writeStructBegin('TCustomerAuthenticationMessage');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I64, 1);
    output.writeI64(this.customerId);
    output.writeFieldEnd();
  }
  if (this.realNameStatus !== null && this.realNameStatus !== undefined) {
    output.writeFieldBegin('realNameStatus', Thrift.Type.I32, 2);
    output.writeI32(this.realNameStatus);
    output.writeFieldEnd();
  }
  if (this.authenticationType !== null && this.authenticationType !== undefined) {
    output.writeFieldBegin('authenticationType', Thrift.Type.I32, 3);
    output.writeI32(this.authenticationType);
    output.writeFieldEnd();
  }
  if (this.signPersonType !== null && this.signPersonType !== undefined) {
    output.writeFieldBegin('signPersonType', Thrift.Type.I32, 4);
    output.writeI32(this.signPersonType);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 5);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 6);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.idcardNo !== null && this.idcardNo !== undefined) {
    output.writeFieldBegin('idcardNo', Thrift.Type.STRING, 7);
    output.writeString(this.idcardNo);
    output.writeFieldEnd();
  }
  if (this.bankCardNo !== null && this.bankCardNo !== undefined) {
    output.writeFieldBegin('bankCardNo', Thrift.Type.STRING, 8);
    output.writeString(this.bankCardNo);
    output.writeFieldEnd();
  }
  if (this.authFileUrl !== null && this.authFileUrl !== undefined) {
    output.writeFieldBegin('authFileUrl', Thrift.Type.STRING, 9);
    output.writeString(this.authFileUrl);
    output.writeFieldEnd();
  }
  if (this.authorizerIdcardFrontUrl !== null && this.authorizerIdcardFrontUrl !== undefined) {
    output.writeFieldBegin('authorizerIdcardFrontUrl', Thrift.Type.STRING, 10);
    output.writeString(this.authorizerIdcardFrontUrl);
    output.writeFieldEnd();
  }
  if (this.authorizerIdcardBackUrl !== null && this.authorizerIdcardBackUrl !== undefined) {
    output.writeFieldBegin('authorizerIdcardBackUrl', Thrift.Type.STRING, 11);
    output.writeString(this.authorizerIdcardBackUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerDTO = module.exports.TCustomerDTO = function(args) {
  this.id = null;
  this.type = null;
  this.qualName = null;
  this.qualType = null;
  this.qualCode = null;
  this.status = null;
  this.isValid = null;
  this.isIetegrality = null;
  this.deadlineType = null;
  this.deadlineDate = null;
  this.companyQualification = null;
  this.personalQualification = null;
  this.migrateFlag = null;
  this.migrateId = null;
  this.source = null;
  this.authenticationMessage = null;
  this.realNameStatus = null;
  this.rejectReason = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.qualName !== undefined) {
      this.qualName = args.qualName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualName is unset!');
    }
    if (args.qualType !== undefined) {
      this.qualType = args.qualType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualType is unset!');
    }
    if (args.qualCode !== undefined) {
      this.qualCode = args.qualCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualCode is unset!');
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.isValid !== undefined) {
      this.isValid = args.isValid;
    }
    if (args.isIetegrality !== undefined) {
      this.isIetegrality = args.isIetegrality;
    }
    if (args.deadlineType !== undefined) {
      this.deadlineType = args.deadlineType;
    }
    if (args.deadlineDate !== undefined) {
      this.deadlineDate = args.deadlineDate;
    }
    if (args.companyQualification !== undefined) {
      this.companyQualification = args.companyQualification;
    }
    if (args.personalQualification !== undefined) {
      this.personalQualification = args.personalQualification;
    }
    if (args.migrateFlag !== undefined) {
      this.migrateFlag = args.migrateFlag;
    }
    if (args.migrateId !== undefined) {
      this.migrateId = args.migrateId;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.authenticationMessage !== undefined) {
      this.authenticationMessage = args.authenticationMessage;
    }
    if (args.realNameStatus !== undefined) {
      this.realNameStatus = args.realNameStatus;
    }
    if (args.rejectReason !== undefined) {
      this.rejectReason = args.rejectReason;
    }
  }
};
TCustomerDTO.prototype = {};
TCustomerDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.qualName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.qualType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.qualCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.isValid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.isIetegrality = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.deadlineType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.deadlineDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.companyQualification = new ttypes.TCompanyQualification();
        this.companyQualification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.personalQualification = new ttypes.TPersonalQualification();
        this.personalQualification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.migrateFlag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.migrateId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.authenticationMessage = new ttypes.TAuthenticationMessage();
        this.authenticationMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.realNameStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.rejectReason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerDTO.prototype.write = function(output) {
  output.writeStructBegin('TCustomerDTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.qualName !== null && this.qualName !== undefined) {
    output.writeFieldBegin('qualName', Thrift.Type.STRING, 3);
    output.writeString(this.qualName);
    output.writeFieldEnd();
  }
  if (this.qualType !== null && this.qualType !== undefined) {
    output.writeFieldBegin('qualType', Thrift.Type.I32, 4);
    output.writeI32(this.qualType);
    output.writeFieldEnd();
  }
  if (this.qualCode !== null && this.qualCode !== undefined) {
    output.writeFieldBegin('qualCode', Thrift.Type.STRING, 5);
    output.writeString(this.qualCode);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 6);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.isValid !== null && this.isValid !== undefined) {
    output.writeFieldBegin('isValid', Thrift.Type.I32, 7);
    output.writeI32(this.isValid);
    output.writeFieldEnd();
  }
  if (this.isIetegrality !== null && this.isIetegrality !== undefined) {
    output.writeFieldBegin('isIetegrality', Thrift.Type.I32, 8);
    output.writeI32(this.isIetegrality);
    output.writeFieldEnd();
  }
  if (this.deadlineType !== null && this.deadlineType !== undefined) {
    output.writeFieldBegin('deadlineType', Thrift.Type.I32, 9);
    output.writeI32(this.deadlineType);
    output.writeFieldEnd();
  }
  if (this.deadlineDate !== null && this.deadlineDate !== undefined) {
    output.writeFieldBegin('deadlineDate', Thrift.Type.STRING, 10);
    output.writeString(this.deadlineDate);
    output.writeFieldEnd();
  }
  if (this.companyQualification !== null && this.companyQualification !== undefined) {
    output.writeFieldBegin('companyQualification', Thrift.Type.STRUCT, 11);
    this.companyQualification.write(output);
    output.writeFieldEnd();
  }
  if (this.personalQualification !== null && this.personalQualification !== undefined) {
    output.writeFieldBegin('personalQualification', Thrift.Type.STRUCT, 12);
    this.personalQualification.write(output);
    output.writeFieldEnd();
  }
  if (this.migrateFlag !== null && this.migrateFlag !== undefined) {
    output.writeFieldBegin('migrateFlag', Thrift.Type.I32, 13);
    output.writeI32(this.migrateFlag);
    output.writeFieldEnd();
  }
  if (this.migrateId !== null && this.migrateId !== undefined) {
    output.writeFieldBegin('migrateId', Thrift.Type.I64, 14);
    output.writeI64(this.migrateId);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 15);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  if (this.authenticationMessage !== null && this.authenticationMessage !== undefined) {
    output.writeFieldBegin('authenticationMessage', Thrift.Type.STRUCT, 16);
    this.authenticationMessage.write(output);
    output.writeFieldEnd();
  }
  if (this.realNameStatus !== null && this.realNameStatus !== undefined) {
    output.writeFieldBegin('realNameStatus', Thrift.Type.I32, 17);
    output.writeI32(this.realNameStatus);
    output.writeFieldEnd();
  }
  if (this.rejectReason !== null && this.rejectReason !== undefined) {
    output.writeFieldBegin('rejectReason', Thrift.Type.STRING, 18);
    output.writeString(this.rejectReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerStatusAndTypeDTO = module.exports.TCustomerStatusAndTypeDTO = function(args) {
  this.id = null;
  this.type = null;
  this.realNameStatus = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.realNameStatus !== undefined) {
      this.realNameStatus = args.realNameStatus;
    }
  }
};
TCustomerStatusAndTypeDTO.prototype = {};
TCustomerStatusAndTypeDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.realNameStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerStatusAndTypeDTO.prototype.write = function(output) {
  output.writeStructBegin('TCustomerStatusAndTypeDTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.realNameStatus !== null && this.realNameStatus !== undefined) {
    output.writeFieldBegin('realNameStatus', Thrift.Type.I32, 3);
    output.writeI32(this.realNameStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerResDTO = module.exports.TCustomerResDTO = function(args) {
  this.retCode = null;
  this.error = null;
  this.data = null;
  if (args) {
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retCode is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TCustomerResDTO.prototype = {};
TCustomerResDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new commons_ttypes.TError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TCustomerDTO();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerResDTO.prototype.write = function(output) {
  output.writeStructBegin('TCustomerResDTO');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerStatusAndTypeResDTO = module.exports.TCustomerStatusAndTypeResDTO = function(args) {
  this.success = null;
  this.status = null;
  this.data = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TCustomerStatusAndTypeResDTO.prototype = {};
TCustomerStatusAndTypeResDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new commons2_ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TCustomerStatusAndTypeDTO();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerStatusAndTypeResDTO.prototype.write = function(output) {
  output.writeStructBegin('TCustomerStatusAndTypeResDTO');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 2);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerQueryParam = module.exports.TCustomerQueryParam = function(args) {
  this.status = null;
  this.isValid = null;
  this.name = null;
  this.pageNum = null;
  this.pageSize = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.isValid !== undefined) {
      this.isValid = args.isValid;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.pageNum !== undefined) {
      this.pageNum = args.pageNum;
    }
    if (args.pageSize !== undefined) {
      this.pageSize = args.pageSize;
    }
  }
};
TCustomerQueryParam.prototype = {};
TCustomerQueryParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.isValid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerQueryParam.prototype.write = function(output) {
  output.writeStructBegin('TCustomerQueryParam');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.isValid !== null && this.isValid !== undefined) {
    output.writeFieldBegin('isValid', Thrift.Type.I32, 2);
    output.writeI32(this.isValid);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I32, 4);
    output.writeI32(this.pageNum);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 5);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerPageDTO = module.exports.TCustomerPageDTO = function(args) {
  this.data = null;
  this.page = null;
  if (args) {
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
TCustomerPageDTO.prototype = {};
TCustomerPageDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.data = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.TCustomerDTO();
          elem6.read(input);
          this.data.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new commons_ttypes.TPage();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerPageDTO.prototype.write = function(output) {
  output.writeStructBegin('TCustomerPageDTO');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (var iter7 in this.data)
    {
      if (this.data.hasOwnProperty(iter7))
      {
        iter7 = this.data[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 2);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerListDTO = module.exports.TCustomerListDTO = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TCustomerListDTO.prototype = {};
TCustomerListDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.data = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.TCustomerDTO();
          elem14.read(input);
          this.data.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerListDTO.prototype.write = function(output) {
  output.writeStructBegin('TCustomerListDTO');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (var iter15 in this.data)
    {
      if (this.data.hasOwnProperty(iter15))
      {
        iter15 = this.data[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerPageResDTO = module.exports.TCustomerPageResDTO = function(args) {
  this.retCode = null;
  this.error = null;
  this.data = null;
  if (args) {
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retCode is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TCustomerPageResDTO.prototype = {};
TCustomerPageResDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new commons_ttypes.TError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TCustomerPageDTO();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerPageResDTO.prototype.write = function(output) {
  output.writeStructBegin('TCustomerPageResDTO');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerListResDTO = module.exports.TCustomerListResDTO = function(args) {
  this.retCode = null;
  this.error = null;
  this.data = null;
  if (args) {
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retCode is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TCustomerListResDTO.prototype = {};
TCustomerListResDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new commons_ttypes.TError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TCustomerListDTO();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerListResDTO.prototype.write = function(output) {
  output.writeStructBegin('TCustomerListResDTO');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TBizUserDTO = module.exports.TBizUserDTO = function(args) {
  this.id = null;
  this.shopId = null;
  this.shopName = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.shopId !== undefined) {
      this.shopId = args.shopId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shopId is unset!');
    }
    if (args.shopName !== undefined) {
      this.shopName = args.shopName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field shopName is unset!');
    }
  }
};
TBizUserDTO.prototype = {};
TBizUserDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.shopId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.shopName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBizUserDTO.prototype.write = function(output) {
  output.writeStructBegin('TBizUserDTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.shopId !== null && this.shopId !== undefined) {
    output.writeFieldBegin('shopId', Thrift.Type.I32, 2);
    output.writeI32(this.shopId);
    output.writeFieldEnd();
  }
  if (this.shopName !== null && this.shopName !== undefined) {
    output.writeFieldBegin('shopName', Thrift.Type.STRING, 3);
    output.writeString(this.shopName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TBizUserListDTO = module.exports.TBizUserListDTO = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TBizUserListDTO.prototype = {};
TBizUserListDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.data = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.TBizUserDTO();
          elem22.read(input);
          this.data.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBizUserListDTO.prototype.write = function(output) {
  output.writeStructBegin('TBizUserListDTO');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (var iter23 in this.data)
    {
      if (this.data.hasOwnProperty(iter23))
      {
        iter23 = this.data[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TBizUserResDTO = module.exports.TBizUserResDTO = function(args) {
  this.retCode = null;
  this.error = null;
  this.data = null;
  if (args) {
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retCode is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TBizUserResDTO.prototype = {};
TBizUserResDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new commons_ttypes.TError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TBizUserListDTO();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBizUserResDTO.prototype.write = function(output) {
  output.writeStructBegin('TBizUserResDTO');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TEsMerchantDTO = module.exports.TEsMerchantDTO = function(args) {
  this.id = null;
  this.bizLicence = null;
  this.bizName = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.bizLicence !== undefined) {
      this.bizLicence = args.bizLicence;
    }
    if (args.bizName !== undefined) {
      this.bizName = args.bizName;
    }
  }
};
TEsMerchantDTO.prototype = {};
TEsMerchantDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.bizLicence = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bizName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TEsMerchantDTO.prototype.write = function(output) {
  output.writeStructBegin('TEsMerchantDTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.bizLicence !== null && this.bizLicence !== undefined) {
    output.writeFieldBegin('bizLicence', Thrift.Type.STRING, 2);
    output.writeString(this.bizLicence);
    output.writeFieldEnd();
  }
  if (this.bizName !== null && this.bizName !== undefined) {
    output.writeFieldBegin('bizName', Thrift.Type.STRING, 3);
    output.writeString(this.bizName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TEsMerchantListDTO = module.exports.TEsMerchantListDTO = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TEsMerchantListDTO.prototype = {};
TEsMerchantListDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.data = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.TEsMerchantDTO();
          elem30.read(input);
          this.data.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TEsMerchantListDTO.prototype.write = function(output) {
  output.writeStructBegin('TEsMerchantListDTO');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (var iter31 in this.data)
    {
      if (this.data.hasOwnProperty(iter31))
      {
        iter31 = this.data[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TEsMerchantResDTO = module.exports.TEsMerchantResDTO = function(args) {
  this.retCode = null;
  this.error = null;
  this.data = null;
  if (args) {
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retCode is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TEsMerchantResDTO.prototype = {};
TEsMerchantResDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new commons_ttypes.TError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TEsMerchantListDTO();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TEsMerchantResDTO.prototype.write = function(output) {
  output.writeStructBegin('TEsMerchantResDTO');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerForShopChangeDTO = module.exports.TCustomerForShopChangeDTO = function(args) {
  this.id = null;
  this.name = null;
  this.qualCode = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.qualCode !== undefined) {
      this.qualCode = args.qualCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualCode is unset!');
    }
  }
};
TCustomerForShopChangeDTO.prototype = {};
TCustomerForShopChangeDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.qualCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerForShopChangeDTO.prototype.write = function(output) {
  output.writeStructBegin('TCustomerForShopChangeDTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.qualCode !== null && this.qualCode !== undefined) {
    output.writeFieldBegin('qualCode', Thrift.Type.STRING, 3);
    output.writeString(this.qualCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerResForShopChangeDTO = module.exports.TCustomerResForShopChangeDTO = function(args) {
  this.retCode = null;
  this.error = null;
  this.data = null;
  if (args) {
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retCode is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TCustomerResForShopChangeDTO.prototype = {};
TCustomerResForShopChangeDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new commons_ttypes.TError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TCustomerForShopChangeDTO();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerResForShopChangeDTO.prototype.write = function(output) {
  output.writeStructBegin('TCustomerResForShopChangeDTO');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomer = module.exports.TCustomer = function(args) {
  this.id = null;
  this.code = null;
  this.msg = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
TCustomer.prototype = {};
TCustomer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomer.prototype.write = function(output) {
  output.writeStructBegin('TCustomer');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 2);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 3);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerRes = module.exports.TCustomerRes = function(args) {
  this.retCode = null;
  this.error = null;
  this.data = null;
  if (args) {
    if (args.retCode !== undefined) {
      this.retCode = args.retCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field retCode is unset!');
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TCustomerRes.prototype = {};
TCustomerRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.retCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new commons_ttypes.TError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TCustomer();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerRes.prototype.write = function(output) {
  output.writeStructBegin('TCustomerRes');
  if (this.retCode !== null && this.retCode !== undefined) {
    output.writeFieldBegin('retCode', Thrift.Type.I32, 1);
    output.writeI32(this.retCode);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCustomerAuthenticationMessageRes = module.exports.TCustomerAuthenticationMessageRes = function(args) {
  this.success = null;
  this.status = null;
  this.data = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TCustomerAuthenticationMessageRes.prototype = {};
TCustomerAuthenticationMessageRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new commons2_ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TCustomerAuthenticationMessage();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCustomerAuthenticationMessageRes.prototype.write = function(output) {
  output.writeStructBegin('TCustomerAuthenticationMessageRes');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 2);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

