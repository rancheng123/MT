//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var commons2_ttypes = require('./commons2_types')


var ttypes = module.exports = {};
var TAuditItemDTO = module.exports.TAuditItemDTO = function(args) {
  this.attrId = null;
  this.attrName = null;
  this.attrValue = null;
  this.attrDisplay = null;
  this.attrDesc = null;
  if (args) {
    if (args.attrId !== undefined) {
      this.attrId = args.attrId;
    }
    if (args.attrName !== undefined) {
      this.attrName = args.attrName;
    }
    if (args.attrValue !== undefined) {
      this.attrValue = args.attrValue;
    }
    if (args.attrDisplay !== undefined) {
      this.attrDisplay = args.attrDisplay;
    }
    if (args.attrDesc !== undefined) {
      this.attrDesc = args.attrDesc;
    }
  }
};
TAuditItemDTO.prototype = {};
TAuditItemDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.attrId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attrName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.attrValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.attrDisplay = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.attrDesc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAuditItemDTO.prototype.write = function(output) {
  output.writeStructBegin('TAuditItemDTO');
  if (this.attrId !== null && this.attrId !== undefined) {
    output.writeFieldBegin('attrId', Thrift.Type.I32, 1);
    output.writeI32(this.attrId);
    output.writeFieldEnd();
  }
  if (this.attrName !== null && this.attrName !== undefined) {
    output.writeFieldBegin('attrName', Thrift.Type.STRING, 2);
    output.writeString(this.attrName);
    output.writeFieldEnd();
  }
  if (this.attrValue !== null && this.attrValue !== undefined) {
    output.writeFieldBegin('attrValue', Thrift.Type.STRING, 3);
    output.writeString(this.attrValue);
    output.writeFieldEnd();
  }
  if (this.attrDisplay !== null && this.attrDisplay !== undefined) {
    output.writeFieldBegin('attrDisplay', Thrift.Type.STRING, 4);
    output.writeString(this.attrDisplay);
    output.writeFieldEnd();
  }
  if (this.attrDesc !== null && this.attrDesc !== undefined) {
    output.writeFieldBegin('attrDesc', Thrift.Type.STRING, 5);
    output.writeString(this.attrDesc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TPhotoItemDTO = module.exports.TPhotoItemDTO = function(args) {
  this.photoType = null;
  this.photoName = null;
  this.photoUrls = null;
  if (args) {
    if (args.photoType !== undefined) {
      this.photoType = args.photoType;
    }
    if (args.photoName !== undefined) {
      this.photoName = args.photoName;
    }
    if (args.photoUrls !== undefined) {
      this.photoUrls = args.photoUrls;
    }
  }
};
TPhotoItemDTO.prototype = {};
TPhotoItemDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.photoType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.photoName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.photoUrls = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.photoUrls.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPhotoItemDTO.prototype.write = function(output) {
  output.writeStructBegin('TPhotoItemDTO');
  if (this.photoType !== null && this.photoType !== undefined) {
    output.writeFieldBegin('photoType', Thrift.Type.I32, 1);
    output.writeI32(this.photoType);
    output.writeFieldEnd();
  }
  if (this.photoName !== null && this.photoName !== undefined) {
    output.writeFieldBegin('photoName', Thrift.Type.STRING, 2);
    output.writeString(this.photoName);
    output.writeFieldEnd();
  }
  if (this.photoUrls !== null && this.photoUrls !== undefined) {
    output.writeFieldBegin('photoUrls', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.photoUrls.length);
    for (var iter7 in this.photoUrls)
    {
      if (this.photoUrls.hasOwnProperty(iter7))
      {
        iter7 = this.photoUrls[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TAuditDetailDTO = module.exports.TAuditDetailDTO = function(args) {
  this.status = null;
  this.auditItems = null;
  this.photoItems = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.auditItems !== undefined) {
      this.auditItems = args.auditItems;
    }
    if (args.photoItems !== undefined) {
      this.photoItems = args.photoItems;
    }
  }
};
TAuditDetailDTO.prototype = {};
TAuditDetailDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.auditItems = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.TAuditItemDTO();
          elem14.read(input);
          this.auditItems.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.photoItems = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new ttypes.TPhotoItemDTO();
          elem21.read(input);
          this.photoItems.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAuditDetailDTO.prototype.write = function(output) {
  output.writeStructBegin('TAuditDetailDTO');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.auditItems !== null && this.auditItems !== undefined) {
    output.writeFieldBegin('auditItems', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.auditItems.length);
    for (var iter22 in this.auditItems)
    {
      if (this.auditItems.hasOwnProperty(iter22))
      {
        iter22 = this.auditItems[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.photoItems !== null && this.photoItems !== undefined) {
    output.writeFieldBegin('photoItems', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.photoItems.length);
    for (var iter23 in this.photoItems)
    {
      if (this.photoItems.hasOwnProperty(iter23))
      {
        iter23 = this.photoItems[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TAuditDetailResult = module.exports.TAuditDetailResult = function(args) {
  this.success = null;
  this.status = null;
  this.data = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
TAuditDetailResult.prototype = {};
TAuditDetailResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new commons2_ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new ttypes.TAuditDetailDTO();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAuditDetailResult.prototype.write = function(output) {
  output.writeStructBegin('TAuditDetailResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 2);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 3);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TAuditReasonDTO = module.exports.TAuditReasonDTO = function(args) {
  this.reasonId = null;
  this.content = null;
  if (args) {
    if (args.reasonId !== undefined) {
      this.reasonId = args.reasonId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reasonId is unset!');
    }
    if (args.content !== undefined) {
      this.content = args.content;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field content is unset!');
    }
  }
};
TAuditReasonDTO.prototype = {};
TAuditReasonDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reasonId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAuditReasonDTO.prototype.write = function(output) {
  output.writeStructBegin('TAuditReasonDTO');
  if (this.reasonId !== null && this.reasonId !== undefined) {
    output.writeFieldBegin('reasonId', Thrift.Type.I32, 1);
    output.writeI32(this.reasonId);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 2);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TAuditReasonResult = module.exports.TAuditReasonResult = function(args) {
  this.success = null;
  this.status = null;
  this.data = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field data is unset!');
    }
  }
};
TAuditReasonResult.prototype = {};
TAuditReasonResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new commons2_ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.data = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.TAuditReasonDTO();
          elem30.read(input);
          this.data.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAuditReasonResult.prototype.write = function(output) {
  output.writeStructBegin('TAuditReasonResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 2);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (var iter31 in this.data)
    {
      if (this.data.hasOwnProperty(iter31))
      {
        iter31 = this.data[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TAuditResultDTO = module.exports.TAuditResultDTO = function(args) {
  this.attrId = null;
  this.rejectReasonIds = null;
  this.auditNote = null;
  if (args) {
    if (args.attrId !== undefined) {
      this.attrId = args.attrId;
    }
    if (args.rejectReasonIds !== undefined) {
      this.rejectReasonIds = args.rejectReasonIds;
    }
    if (args.auditNote !== undefined) {
      this.auditNote = args.auditNote;
    }
  }
};
TAuditResultDTO.prototype = {};
TAuditResultDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.attrId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.rejectReasonIds = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI32();
          this.rejectReasonIds.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.auditNote = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAuditResultDTO.prototype.write = function(output) {
  output.writeStructBegin('TAuditResultDTO');
  if (this.attrId !== null && this.attrId !== undefined) {
    output.writeFieldBegin('attrId', Thrift.Type.I32, 1);
    output.writeI32(this.attrId);
    output.writeFieldEnd();
  }
  if (this.rejectReasonIds !== null && this.rejectReasonIds !== undefined) {
    output.writeFieldBegin('rejectReasonIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.rejectReasonIds.length);
    for (var iter39 in this.rejectReasonIds)
    {
      if (this.rejectReasonIds.hasOwnProperty(iter39))
      {
        iter39 = this.rejectReasonIds[iter39];
        output.writeI32(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.auditNote !== null && this.auditNote !== undefined) {
    output.writeFieldBegin('auditNote', Thrift.Type.STRING, 3);
    output.writeString(this.auditNote);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TSaveAuditReqDTO = module.exports.TSaveAuditReqDTO = function(args) {
  this.auditFlowId = null;
  this.items = null;
  this.auditUser = null;
  this.needNext = null;
  if (args) {
    if (args.auditFlowId !== undefined) {
      this.auditFlowId = args.auditFlowId;
    }
    if (args.items !== undefined) {
      this.items = args.items;
    }
    if (args.auditUser !== undefined) {
      this.auditUser = args.auditUser;
    }
    if (args.needNext !== undefined) {
      this.needNext = args.needNext;
    }
  }
};
TSaveAuditReqDTO.prototype = {};
TSaveAuditReqDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.auditFlowId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.items = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.TAuditResultDTO();
          elem46.read(input);
          this.items.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.auditUser = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.needNext = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSaveAuditReqDTO.prototype.write = function(output) {
  output.writeStructBegin('TSaveAuditReqDTO');
  if (this.auditFlowId !== null && this.auditFlowId !== undefined) {
    output.writeFieldBegin('auditFlowId', Thrift.Type.I32, 1);
    output.writeI32(this.auditFlowId);
    output.writeFieldEnd();
  }
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter47 in this.items)
    {
      if (this.items.hasOwnProperty(iter47))
      {
        iter47 = this.items[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.auditUser !== null && this.auditUser !== undefined) {
    output.writeFieldBegin('auditUser', Thrift.Type.I32, 3);
    output.writeI32(this.auditUser);
    output.writeFieldEnd();
  }
  if (this.needNext !== null && this.needNext !== undefined) {
    output.writeFieldBegin('needNext', Thrift.Type.I32, 4);
    output.writeI32(this.needNext);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

